theory access_ticket
/************************************************************/
/* Conventions:                                             */
/*    - A prover in this theory corresponds to a            */
/*      vehicle (V) in the article.                         */
/*    - A verifier in this theory corresponds to an         */
/*      access control vehicle (ACV) in the article.        */
/*    - Timestamps and locations are either treated as      */
/*      constants or ignored.                               */
/*    - A secure channel Out_S and In_S is used to model    */
/*      the TLS secure channel established by V and P.      */
/************************************************************/
begin

builtins: signing, symmetric-encryption, hashing


// Public key infrastructure
rule Register_pk_and_ticket:
[ 
    Fr(~ltkA),   //Given a fresh long-term key 
    Fr(~psidA),   //and a fresh pseudo-identifier 
]--[
    Once($a),   //signal that $a should be setup only once
]->
[ 
    !Ltk($a, ~ltkA), //establish that agent $a has secret key ~ltkA
    !Pk($a, pk(~ltkA)), //and that pk(~ltkA) is the corresponding public key 
    !Psid($a, ~psidA), //and that agent $a has pseudo-identifier ~psidA
    Out(pk(~ltkA)), //and that the public key is available on the network 
] 


/* 
Prover self-generates an access ticket
*/
rule P_0_generate:
let ticket = <~n, 'tP', 'lP', psidP, 'cat'> in 
[ 
    !Ltk(p, ltkP),  //given a prover p with with a secret key ltkP 
    !Psid(p, psidP), //and pseudo-identifer  
    Fr(~n),    //and given a fresh nonce ~n
] 
--[ 
    AccessTicketGenerated(p, ticket),   //signal that $p generated a ticket
]->
[ 
    !AccessTicket(p, ticket), //establish that p generated a ticket  
]


/* 
Verifier sends first message
*/
rule V_1_send:
let da = <~m, 'tV', 'lV'> //where time and location are treated as public constants
in 
[ 
    Fr(~m),    //given a fresh nonce m 
    !Ltk(v, ltkV),  //and a verifier with a secret key ltkV 
]
--[ 
    SessionStarted(v, ~m),     //signal that v started a session with nonce m 
]->
[ 
    VerifierSession(v, da, sign(da,ltkV)), //establish that v started a session 
                                           //with detection announcement da  
    Out(<da,sign(da,ltkV)>),  //send msg signed with ltkV 
]



/*
Prover receives a detection announcement from an open channel. 
Prover responds via a secure channel.
*/
rule P_1_receive:
let 
    ticket = <n, 'tP', 'lP', psidP, 'cat'>
    da = <m, 'tV', 'lV'> 
    ep = <ticket, sig>
in 
[ 
    !Ltk(p, ltkP),  //given a prover p with secret ltkP 
    !AccessTicket(p, ticket),  //that has generated a ticket 
    !Pk(v, pkV),    //and a verifier with public key pkV
    In(<da,sig>),    //and a signed detection announcement 
]
--[ 
    Recv(p, m, n),     //signal that p received nonce m and responded with n
    Running(p,v,ep), //signal the p expects agreement on ticket with v 
    Eq(verify(sig,da,pkV),true), //ensure that the detection announcement is correctly signed. 
    Secret(ticket), //signal the ticket should remain secret
]->
[ 
    Out_S(p, v, <ep, sign(ep, ltkP)>) //send encounter proof signed 
]


/*
Verifier receives a response and claim agreement with the ticket.  
*/
rule V_1_receive:
let 
    ticket = <n, 'tP', 'lP', psidP, 'cat'>
    da = <m, 'tV', 'lV'>
    ep = <ticket, sign(da,ltkV)>
    msgIn = <ep, sig>
in 
[ 
    VerifierSession(v, da, sign(da,ltkV)), //given a session started by v  
    !Ltk(v, ltkV),  //which has secret ltkV 
    !Pk(p, pkP),    //given a prover with public key pkP
    In_S(p, v, <ep, sig>) // and the reception of a encounter proof
]
--[
    VerifiedTicket(v,p,ticket),  //signal that v agrees on ticket with p
    Commit(v,p,ep),  //signal that v agrees on ticket with p
    Eq(verify(sig,ep,pkP),true), //ensure the encounter proof is correctly signed
]->
[ 
]

restriction Equality:
"All x y #i. Eq(x,y) @i ==> x = y"

restriction unique:
"All x #i #j. Once(x) @#i & Once(x) @#j ==> #i = #j"

/*
A sanity check to ensure that the protcol runs.
*/
lemma executable:
exists-trace
"Ex p v m n ticket #i #j #k. 
    AccessTicketGenerated(p, ticket)@i 
    & 
    Recv(p, m, n)@j
    &
    VerifiedTicket(v,p,ticket)@k
"

/*
V claims non-injective agreement with P on
the ticket
*/
lemma noninjective_agreement:
"All acv v ep #i.
    Commit(acv,v,ep) @i
        ==> (Ex #j. Running(v,acv,ep) @j)
 "

/*
Secrecy claim on the access ticket
*/
lemma secrecy:
  "All x #i.
    Secret(x) @i ==> not (Ex #j. K(x)@j)"


/* Secure Channel Rules */
rule ChanOut_S:
[ Out_S($A,$B,x) ]
--[ ChanOut_S($A,$B,x) ]->
[ !Sec($A,$B,x) ]

rule ChanIn_S:
[ !Sec($A,$B,x) ]
--[ ChanIn_S($A,$B,x) ]->
[ In_S($A,$B,x) ]

end
